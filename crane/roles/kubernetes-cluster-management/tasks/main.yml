---
- name: Copy CFSSL Kubernetes Json Files
  template:
    src: "{{ item }}"
    dest: "{{ kubernetes_pki_dirs }}{{ item }}"
    owner: "{{ ssh_connect_user }}" 
    mode: 0644
  with_items:
    - "ca-config.json"
    - "ca-csr.json"
    - "apiserver-csr.json"
    - "front-proxy-ca-csr.json"
    - "front-proxy-client-csr.json"
    - "admin-csr.json"
    - "manager-csr.json"
    - "scheduler-csr.json"
    - "kubelet-csr.json"

## Create Kubernetes CA
- name: Create Kubernetes Certificate Files
  shell: "cd {{ kubernetes_pki_dirs }} && {{ kubernetes_ctl_path }}cfssl gencert -initca ca-csr.json | {{ kubernetes_ctl_path }}cfssljson -bare ca"

- name: Create Kubernetes API Server Certificate Files
  shell: "cd {{ kubernetes_pki_dirs }} && {{ kubernetes_ctl_path }}cfssl gencert \
            -ca=ca.pem \
            -ca-key=ca-key.pem \
            -config=ca-config.json \
            -hostname=127.0.0.1,{{ k8s_master_default_ip_str }},{{ k8s_cluster_ip }},{{ k8s_load_balance_ip }},{{ k8s_master_ip_str }},kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.default.svc.{{ dns_domain }},{{ all_hostname_str }} \
            -profile=kubernetes \
            apiserver-csr.json | {{ kubernetes_ctl_path }}cfssljson -bare apiserver"

- name: Create Kubernetes Front Proxy Certificate Files
  shell: "cd {{ kubernetes_pki_dirs }} && {{ kubernetes_ctl_path }}cfssl gencert \
            -initca front-proxy-ca-csr.json | {{ kubernetes_ctl_path }}cfssljson -bare front-proxy-ca"

- name: Create Kubernetes Front Proxy Client Certificate Files
  shell: "cd {{ kubernetes_pki_dirs }} && {{ kubernetes_ctl_path }}cfssl gencert \
            -ca=front-proxy-ca.pem \
            -ca-key=front-proxy-ca-key.pem \
            -config=ca-config.json \
            -profile=kubernetes \
            front-proxy-client-csr.json | {{ kubernetes_ctl_path }}cfssljson -bare front-proxy-client"

- name: Create Kubernetes Admin Certificate Files
  shell: "cd {{ kubernetes_pki_dirs }} && {{ kubernetes_ctl_path }}cfssl gencert \
            -ca=ca.pem \
            -ca-key=ca-key.pem \
            -config=ca-config.json \
            -profile=kubernetes \
            admin-csr.json | {{ kubernetes_ctl_path }}cfssljson -bare admin"

- name: Create Kubernetes Controller Manager Certificate Files
  shell: "cd {{ kubernetes_pki_dirs }} && {{ kubernetes_ctl_path }}cfssl gencert \
            -ca=ca.pem \
            -ca-key=ca-key.pem \
            -config=ca-config.json \
            -profile=kubernetes \
            manager-csr.json | {{ kubernetes_ctl_path }}cfssljson -bare controller-manager"

- name: Create Kubernetes Scheduler Certificate Files
  shell: "cd {{ kubernetes_pki_dirs }} && {{ kubernetes_ctl_path }}cfssl gencert \
            -ca=ca.pem \
            -ca-key=ca-key.pem \
            -config=ca-config.json \
            -profile=kubernetes \
            scheduler-csr.json | {{ kubernetes_ctl_path }}cfssljson -bare scheduler"

# Kubeconfig
## ********************************************************************************************************************************
## Create Kubernetes Admin Kubeconfig
- name: Create Kubernetes Admin Kubeconfig
  shell: "cd {{ kubernetes_pki_dirs }} && 
            {{ kubernetes_ctl_path }}kubectl config set-cluster kubernetes \
              --certificate-authority=ca.pem \
              --embed-certs=true \
              --server={{ k8s_apiserver_https_bind }} \
              --kubeconfig={{ kubernetes_etc_dirs }}admin.conf &&
            {{ kubernetes_ctl_path }}kubectl config set-credentials kubernetes-admin 
              --client-certificate=admin.pem 
              --client-key=admin-key.pem 
              --embed-certs=true 
              --kubeconfig={{ kubernetes_etc_dirs }}admin.conf && 
            {{ kubernetes_ctl_path }}kubectl config set-context kubernetes-admin@kubernetes \
              --cluster=kubernetes \
              --user=kubernetes-admin \
              --kubeconfig={{ kubernetes_etc_dirs }}admin.conf && 
            {{ kubernetes_ctl_path }}kubectl config use-context kubernetes-admin@kubernetes \
              --kubeconfig={{ kubernetes_etc_dirs }}admin.conf"

## Create Kubernetes Controller Manager  Kubeconfig
- name: Create Kubernetes Controller Manager  Kubeconfig
  shell: "cd {{ kubernetes_pki_dirs }} && 
          {{ kubernetes_ctl_path }}kubectl config set-cluster kubernetes 
            --certificate-authority=ca.pem 
            --embed-certs=true 
            --server={{ k8s_apiserver_https_bind }} 
            --kubeconfig={{ kubernetes_etc_dirs }}controller-manager.conf && 
          {{ kubernetes_ctl_path }}kubectl config set-credentials system:kube-controller-manager 
              --client-certificate=controller-manager.pem 
              --client-key=controller-manager-key.pem 
              --embed-certs=true 
              --kubeconfig={{ kubernetes_etc_dirs }}controller-manager.conf && 
          {{ kubernetes_ctl_path }}kubectl config set-context system:kube-controller-manager@kubernetes 
              --cluster=kubernetes 
              --user=system:kube-controller-manager 
              --kubeconfig={{ kubernetes_etc_dirs }}controller-manager.conf &&
          {{ kubernetes_ctl_path }}kubectl config use-context system:kube-controller-manager@kubernetes
              --kubeconfig={{ kubernetes_etc_dirs }}controller-manager.conf"

## Create Kubernetes Scheduler Kubeconfig
- name: Create Kubernetes Scheduler Kubeconfig
  shell: "cd {{ kubernetes_pki_dirs }} && 
          {{ kubernetes_ctl_path }}kubectl config set-cluster kubernetes 
              --certificate-authority=ca.pem 
              --embed-certs=true 
              --server={{ k8s_apiserver_https_bind }} 
              --kubeconfig={{ kubernetes_etc_dirs }}scheduler.conf &&
          {{ kubernetes_ctl_path }}kubectl config set-credentials system:kube-scheduler 
              --client-certificate=scheduler.pem 
              --client-key=scheduler-key.pem 
              --embed-certs=true 
              --kubeconfig={{ kubernetes_etc_dirs }}scheduler.conf && 
          {{ kubernetes_ctl_path }}kubectl config set-context system:kube-scheduler@kubernetes 
              --cluster=kubernetes 
              --user=system:kube-scheduler 
              --kubeconfig={{ kubernetes_etc_dirs }}scheduler.conf && 
          {{ kubernetes_ctl_path }}kubectl config use-context system:kube-scheduler@kubernetes 
              --kubeconfig={{ kubernetes_etc_dirs }}scheduler.conf"

# Copy CA and Kubeconfig in Nodes
## ********************************************************************************************************************************

## Create Kubernetes Service Account Key
- name: Create Kubernetes Service Account Key
  shell: "cd {{ kubernetes_pki_dirs }} && 
          openssl genrsa -out sa.key 2048 && openssl rsa -in sa.key -pubout -out sa.pub"
          
- name: Clean Files *
  shell: 'rm -rf {{ kubernetes_pki_dirs }}*.json \
                 {{ kubernetes_pki_dirs }}*.csr \
                 {{ kubernetes_pki_dirs }}scheduler*.pem \
                 {{ kubernetes_pki_dirs }}controller-manager*.pem \
                 {{ kubernetes_pki_dirs }}admin*.pem'

- name: Set Etcd CA Files Permissions
  shell: "for ITEM in $(ls {{ kubernetes_etc_dirs }}); do 
            chown {{ ssh_connect_user }} {{ kubernetes_etc_dirs }}${ITEM}; 
          done"

- name: Set Kubernetes CA Files Permissions
  shell: "for ITEM in $(ls {{ kubernetes_pki_dirs }}); do 
            chown {{ ssh_connect_user }} {{ kubernetes_pki_dirs }}${ITEM}; 
          done"

## Copy CA Files in Nodes
- name: Copy CA Files in Nodes
  shell: "for FILE in $(ls {{ kubernetes_pki_dirs }}); do
            sudo scp -r -p -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no -i {{ ssh_public_key }} \
            -P {{ ssh_connect_port }} {{ kubernetes_pki_dirs }}${FILE} {{ ssh_connect_user }}@{{ item[0] }}:{{ kubernetes_pki_dirs }};
          done;
          for FILE in admin.conf controller-manager.conf scheduler.conf; do
            sudo scp -r -p -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no -i {{ ssh_public_key }} \
            -P {{ ssh_connect_port }} {{ kubernetes_etc_dirs }}${FILE} {{ ssh_connect_user }}@{{ item[0] }}:{{ kubernetes_etc_dirs }}${FILE};
          done"
  with_nested:
    - "{{ k8s_master_ip_list[1:] }}"
    - "-"
