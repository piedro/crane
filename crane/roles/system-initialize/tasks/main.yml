---
- setup:
  
- include_vars: "{{ item }}"
  with_items:
    - "roles/crane/defaults/main.yml"
    - "roles/etcd-cluster-management/vars/main.yml"
    - "roles/remove-cluster/defaults/main.yml"
    - "roles/kubernetes-networks/defaults/main.yml"
    - "roles/kubernetes-cluster-management/defaults/configure.yaml"
    - "roles/downloads-ssh-key/defaults/main.yml"

- name: Check Swap
  shell: "swapon -s | sed '1d' | awk '{print $1}'"
  register: result
  ignore_errors: true

- name: Off Swap
  shell: "swapoff $(swapon -s | sed '1d' | awk '{print $1}')"
  when: result is failed
  ignore_errors: true

- name: Create Binary Perform Directory
  file:
    path: "{{ kubernetes_ctl_path }}"
    mode: 0755
    owner: "{{ ssh_connect_user }}"
    state: directory

- name: Create CA WorkDir
  file:
    path: "{{ etcd_ssl_dirs }}"
    mode: 0755
    owner: "{{ ssh_connect_user }}"
    state: directory

- name: Create Kubernetes PKI WorkDir
  file:
    path: "{{ kubernetes_etc_dirs }}pki"
    mode: 0755
    owner: "{{ ssh_connect_user }}"
    state: directory

- name: Create Kubernetes Manifests WorkDir
  file:
    path: "{{ kubernetes_etc_dirs }}manifests"
    mode: 0755
    owner: "{{ ssh_connect_user }}"
    state: directory

- name: Create CNI Cluster Config
  file:
    path: "{{ cni_config_dir }}"
    mode: 0755
    owner: "{{ ssh_connect_user }}"
    state: directory

- name: Create CNI Binary Directory
  file:
    path: "{{ kubernetes_cni_dirs }}"
    mode: 0755
    owner: "{{ ssh_connect_user }}"
    state: directory

- name: Ubuntu Initialize Plugins
  apt: 
    name: ["openssl"]
    state: present
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
  when: ansible_distribution == 'Ubuntu'
  async: 30
  poll: 2
  ignore_errors: true

- name: Swap Off
  shell: "for i in `cat /proc/swaps | sed -n '2,$p' | awk '{print $1}'`; do swapoff $i;done"
  when: is_swap_off
  ignore_errors: true

- name: Centos Initialize Plugins
  yum: 
    name: ["openssl"]
    state: present
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ https_proxy }}"
  async: 30
  poll: 2
  when: ansible_distribution == 'CentOS'
  ignore_errors: true

- name: Ubuntu Install IPVS Admin
  apt: 
    name: ipvsadm 
    state: present
  when: kube_proxy_mode == 'ipvs' and ansible_distribution == 'Ubuntu' and is_install_ipvsadm
  async: 30
  poll: 2
  ignore_errors: true

- name: Centos Install IPVS Admin
  yum: 
    name: ipvsadm 
    state: present
  when: kube_proxy_mode == 'ipvs' and ansible_distribution == 'CentOS' and is_install_ipvsadm
  async: 30
  poll: 2
  ignore_errors: true

- name: Ubuntu Install IPset
  apt: 
    name: ipset 
    state: present
  when: ansible_distribution == 'Ubuntu' and is_install_ipvsadm
  async: 30
  poll: 2
  ignore_errors: true

- name: Centos Install IPset
  yum: 
    name: ipset 
    state: present
  when: ansible_distribution == 'CentOS' and is_install_ipvsadm
  async: 30
  poll: 2
  ignore_errors: true

- name: IPVS initialize Module
  shell: "modprobe {{ item }}"
  with_items:
  - "ip_vs"
  - "ip_vs_rr"
  - "ip_vs_wrr"
  - "ip_vs_sh"
  - "nf_conntrack_ipv4"
  - "br_netfilter"
  - "ipip"
  - "overlay"
  ignore_errors: true
  
- name: Check IPVS
  shell: "lsmod | grep ip_vs"
  ignore_errors: true

- name: Copy Sysctl Files
  template:
    src: "roles/system-initialize/templates/99-k8s.conf"
    dest: "/etc/sysctl.d/99-k8s.conf"
    owner: "{{ ssh_connect_user }}"
    mode: 0644

- name: Execute Configuration Command
  shell: "sysctl -p /etc/sysctl.d/99-k8s.conf"
  ignore_errors: true

- name: Check Hashsize
  shell: "cat /sys/module/nf_conntrack/parameters/hashsize"
  register: hashsize
  ignore_errors: true

- name: Set nf_conntrack_buckets
  shell: "echo {{ kernel_nf_conntrack_buckets }} > /sys/module/nf_conntrack/parameters/hashsize"
  when: hashsize.stderr or (hashsize.stdout|int < kernel_nf_conntrack_buckets )
  ignore_errors: true

- name: Copy nf_conntrack_buckets Powered up
  template:
    src: "roles/system-initialize/templates/nf_conntrack.conf"
    dest: "/etc/modprobe.d/nf_conntrack.conf"
    owner: "{{ ssh_connect_user }}"
    mode: 0644
  ignore_errors: true

- name: Centos Stop Firewalld
  service: 
    name: firewalld
    enabled: no
  when: ansible_distribution == 'CentOS' and (ansible_distribution_major_version == "7" or ansible_distribution_major_version == "8")
  ignore_errors: true

- name: Centos Stop SELinux
  shell: "sed -i 's#^SELINUX\\=enforcing#SELINUX\\=disabled#g' /etc/selinux/config && setenforce 0"
  when: ansible_distribution == 'CentOS' and (ansible_distribution_major_version == "7" or ansible_distribution_major_version == "8")
  ignore_errors: true

- name: IPTABLE FORWARD ACCEPT
  shell: "iptables -P FORWARD ACCEPT"
  ignore_errors: true

- name: Check Systemd-resolved Systemd Status
  include: "roles/kubernetes-cluster-management/includes/initialize-resolv.yaml"

- name: Set Time Zone
  shell: "ln -sf /usr/share/zoneinfo/{{ time_location }} /etc/localtime"
  ignore_errors: true

- name: Initialize Chrony
  include: "roles/system-initialize/includes/system/chrony.yaml"
  when: is_chrony_deploy

- name: Initialize Limit
  include: "roles/system-initialize/includes/system/limit.yaml"
